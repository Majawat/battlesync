// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(uuid())
  username        String   @unique
  email           String?  @unique
  passwordHash    String
  role            UserRole @default(USER)
  armyForgeToken  String?  // Encrypted
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  lastLogin       DateTime?

  // Relationships
  ownedGroups         GamingGroup[]
  groupMemberships    GroupMembership[]
  // campaignMemberships removed - using GroupMembership + CampaignParticipation
  armies              Army[]
  battleEvents        BattleEvent[]
  damageHistory       DamageHistory[]
  undamageHistory     DamageHistory[]   @relation("DamageHistoryUndoneBy")
  createdCampaigns    Campaign[]
  createdBattles      Battle[]
  battleActionHistory BattleActionHistory[]
  undoBattleActions   BattleActionHistory[] @relation("BattleActionHistoryUndoneBy")

  @@map("users")
}

model GamingGroup {
  id          String   @id @default(uuid())
  name        String
  description String?
  ownerId     String
  inviteCode  String   @unique
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  owner       User               @relation(fields: [ownerId], references: [id])
  memberships GroupMembership[]
  campaigns   Campaign[]
  battles     Battle[]

  @@map("gaming_groups")
}

// Removed - replaced by enhanced GroupMembership model below

model Campaign {
  id          String         @id @default(uuid())
  groupId     String
  name        String
  description String?
  narrative   String?
  status      CampaignStatus @default(PLANNING)
  settings    Json           // CampaignSettings
  createdBy   String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // Relationships
  group           GamingGroup             @relation(fields: [groupId], references: [id])
  creator         User                    @relation(fields: [createdBy], references: [id])
  participations  CampaignParticipation[] // Group-based participation
  armies          Army[]                  // Armies in this campaign
  battles         Battle[]
  missions        Mission[]

  @@map("campaigns")
}

// Group-level membership - the primary membership model
model GroupMembership {
  id              String           @id @default(uuid())
  userId          String
  groupId         String
  role            GroupMemberRole  @default(MEMBER)
  status          MembershipStatus @default(ACTIVE)
  joinedAt        DateTime         @default(now())
  invitedBy       String?          // userId who sent invitation
  invitedAt       DateTime?        // when invitation was sent
  
  // Relationships
  user            User             @relation(fields: [userId], references: [id])
  group           GamingGroup      @relation(fields: [groupId], references: [id])
  campaignParticipations CampaignParticipation[]

  @@unique([userId, groupId])
  @@map("group_memberships")
}

// Campaign participation - links group members to specific campaigns
model CampaignParticipation {
  id                String            @id @default(uuid())
  groupMembershipId String
  campaignId        String
  primaryArmyId     String?
  campaignRole      CampaignRole      @default(PARTICIPANT)
  totalExperience   Int               @default(0)
  battlesWon        Int               @default(0)
  battlesLost       Int               @default(0)
  joinedCampaignAt  DateTime          @default(now())
  
  // Relationships
  groupMembership   GroupMembership   @relation(fields: [groupMembershipId], references: [id])
  campaign          Campaign          @relation(fields: [campaignId], references: [id])
  
  @@unique([groupMembershipId, campaignId])
  @@map("campaign_participations")
}

// Removed - replaced by GroupMembership + CampaignParticipation

model Army {
  id             String   @id @default(uuid())
  userId         String
  campaignId     String?
  armyForgeId    String
  name           String
  faction        String
  points         Int
  armyData       Json     // ArmyForge data
  customizations Json?    // ArmyCustomizations
  lastSyncedAt   DateTime @default(now())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relationships
  user                 User                @relation(fields: [userId], references: [id])
  campaign             Campaign?           @relation(fields: [campaignId], references: [id])
  battleParticipations BattleParticipant[]

  @@map("armies")
}

model Battle {
  id           String        @id @default(uuid())
  groupId      String        // Always associated with a group
  campaignId   String?       // Optional - null for standalone battles
  missionId    String?       // Optional - null for custom battles
  title        String?       // For standalone battles
  description  String?       // For standalone battles
  status       BattleStatus  @default(SETUP)
  currentState Json          // BattleState
  startedAt    DateTime?
  completedAt  DateTime?
  createdBy    String        // User who created the battle
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  // Relationships
  group        GamingGroup         @relation(fields: [groupId], references: [id])
  campaign     Campaign?           @relation(fields: [campaignId], references: [id])
  mission      Mission?            @relation(fields: [missionId], references: [id])
  creator      User                @relation(fields: [createdBy], references: [id])
  participants BattleParticipant[]
  events       BattleEvent[]
  damageHistory DamageHistory[]
  actionHistory BattleActionHistory[]

  @@map("battles")
}

model BattleParticipant {
  id              String  @id @default(uuid())
  battleId        String
  userId          String
  armyId          String
  faction         String
  startingPoints  Int
  finalExperience Int     @default(0)
  kills           Int     @default(0)
  unitsLost       Int     @default(0)
  isWinner        Boolean @default(false)

  // Relationships
  battle Battle @relation(fields: [battleId], references: [id])
  army   Army   @relation(fields: [armyId], references: [id])

  @@map("battle_participants")
}

model BattleEvent {
  id        String          @id @default(uuid())
  battleId  String
  userId    String
  eventType BattleEventType
  timestamp DateTime        @default(now())
  data      Json

  // Relationships
  battle Battle @relation(fields: [battleId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@map("battle_events")
}

model Mission {
  id                  String           @id @default(uuid())
  campaignId          String
  number              Int
  title               String
  description         String
  points              Int
  status              MissionStatus    @default(UPCOMING)
  scheduledDate       DateTime?
  objectives          Json             // MissionObjective[]
  specialRules        Json             // MissionRule[]
  terrainSuggestions  Json             // TerrainFeature[]
  battleReportFile    String?
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt

  // Relationships
  campaign Campaign @relation(fields: [campaignId], references: [id])
  battles  Battle[]

  @@map("missions")
}

model DamageHistory {
  id                  String            @id @default(uuid())
  battleId            String
  userId              String
  timestamp           DateTime          @default(now())
  actionType          DamageActionType
  
  // Damage details
  targetUnitId        String
  targetModelId       String?
  damage              Int
  sourceDescription   String?
  
  // State snapshots for undo functionality
  beforeState         Json              // Pre-damage unit/model state
  afterState          Json              // Post-damage unit/model state
  
  // Undo information
  canUndo             Boolean           @default(true)
  undoneAt            DateTime?
  undoneBy            String?
  
  // Relationships
  battle              Battle            @relation(fields: [battleId], references: [id])
  user                User              @relation(fields: [userId], references: [id])
  undoneByUser        User?             @relation("DamageHistoryUndoneBy", fields: [undoneBy], references: [id])
  
  @@map("damage_history")
}

// Enums
enum UserRole {
  SERVER_OWNER
  USER
}

// Removed - replaced by GroupMemberRole enum

enum CampaignStatus {
  PLANNING
  ACTIVE
  COMPLETED
  PAUSED
}

enum BattleStatus {
  SETUP
  ACTIVE
  COMPLETED
  CANCELLED
}

enum BattleEventType {
  // Legacy battle events
  BATTLE_STARTED
  BATTLE_ENDED
  PLAYER_JOINED
  PLAYER_LEFT
  UNIT_DAMAGED
  UNIT_KILLED
  UNIT_STATUS_CHANGED
  SPELL_CAST
  COMMAND_USED
  ADMIN_OVERRIDE
  
  // OPR-specific battle events
  PHASE_CHANGED
  ROUND_STARTED
  UNIT_ACTION
  UNIT_ACTIVATED
  DAMAGE_APPLIED
  MODEL_DESTROYED
  UNIT_DESTROYED
  UNIT_SHAKEN
  UNIT_ROUTED
  MORALE_TEST
  COMMAND_POINTS_SPENT
  UNDERDOG_POINTS_GAINED
  KILL_RECORDED
  EXPERIENCE_AWARDED
}

enum MissionStatus {
  UPCOMING
  ACTIVE
  COMPLETED
}

enum GroupMemberRole {
  OWNER      // Group owner (same as creator)
  ADMIN      // Group admin/organizer
  MEMBER     // Regular group member
}

enum CampaignRole {
  CREATOR      // Campaign creator
  ORGANIZER    // Campaign organizer/admin
  PARTICIPANT  // Campaign participant
}

enum MembershipStatus {
  PENDING    // Invited but not yet accepted
  ACTIVE     // Active member
  INACTIVE   // Temporarily inactive
  REMOVED    // Removed from campaign
}

enum DamageActionType {
  DAMAGE_APPLIED
  DAMAGE_UNDONE
}

enum BattleActionType {
  DAMAGE_APPLIED
  SPELL_CAST
  UNIT_ACTION_SET
  UNIT_STATUS_CHANGED
  HERO_JOINED
  PHASE_CHANGED
  ROUND_ADVANCED
  COMMAND_POINTS_SPENT
}

enum UndoComplexity {
  simple    // Simple state restoration
  complex   // Complex multi-unit changes
  cascade   // Changes that affect multiple systems
}

model BattleActionHistory {
  id              String           @id @default(uuid())
  battleId        String
  userId          String
  timestamp       DateTime         @default(now())
  actionType      BattleActionType
  
  // Action-specific data (JSON)
  actionData      Json
  
  // State snapshots for undo (JSON)
  beforeState     Json
  afterState      Json
  
  // Undo capability
  canUndo         Boolean          @default(true)
  undoneAt        DateTime?
  undoneBy        String?
  undoComplexity  UndoComplexity   @default(simple)
  
  // Relationships
  battle          Battle           @relation(fields: [battleId], references: [id], onDelete: Cascade)
  user            User             @relation(fields: [userId], references: [id])
  undoneByUser    User?            @relation("BattleActionHistoryUndoneBy", fields: [undoneBy], references: [id])

  @@index([battleId, timestamp])
  @@index([battleId, canUndo, undoneAt])
  @@index([userId, timestamp])
  @@map("battle_action_history")
}